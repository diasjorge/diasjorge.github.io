<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Mr Dias</title>
 <link href="https://mrdias.com/atom.xml" rel="self"/>
 <link href="https://mrdias.com/"/>
 <updated>2017-12-10T02:14:37+01:00</updated>
 <id>https://mrdias.com/</id>
 <author>
   <name>Jorge Dias</name>
 </author>

 
 <entry>
   <title>Blog redesign</title>
   <link href="https://mrdias.com/2017/12/09/blog-redesign.html"/>
   <updated>2017-12-09T00:00:00+01:00</updated>
   <id>https://mrdias.com/2017/12/09/blog-redesign</id>
   <content type="html">&lt;p&gt;It’s been a while since I worked on the blog’s design. The design
dated back to 2011 which is like an eon in Internet time and I didn’t
particularly liked how it looked anymore so I decided to change it.&lt;/p&gt;

&lt;p&gt;I normally don’t do any design work and CSS is not something I’ve
enjoyed particularly but I’ve always used this space to work on that
area.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;I must say that css has greatly improved over the years. I didn’t have
to do anything to make it look the same on different browsers. The
tooling in google Chrome is just amazing nowadays. You can see exactly
how different elements look, their box size, paddings, margins,
etc. It’s a different experience from what I remembered and I enjoyed
the whole project quite a bit.&lt;/p&gt;

&lt;p&gt;I’m a big fan of &lt;a href=&quot;http://ethanschoonover.com/solarized&quot;&gt;solarized&lt;/a&gt;. I
use it on my editor and on the terminal so I figured having my blog
with solarized would be a great idea :)&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;http://thomasf.github.io/solarized-css/&quot;&gt;solarized-css&lt;/a&gt;
for the color scheme with the reset from
&lt;a href=&quot;http://getskeleton.com&quot;&gt;skeleton&lt;/a&gt; I had from my previous design.&lt;/p&gt;

&lt;p&gt;One of the major changes is that the design was done for mobile first
and then changed it to adapt for bigger screens. I borrowed some ideas
about it from some blog posts like
&lt;a href=&quot;http://dmolsen.com/2013/03/05/media-query-less-design-content-based-breakpoints-tweakpoints/&quot;&gt;this&lt;/a&gt;
about doing media queries based on your content and not defined screen
sizes. I didn’t use any responsive layout framework like skeleton and
just used css-grid now that most browsers support it to define the
content structure.&lt;/p&gt;

&lt;p&gt;I’m happy with the end result, it’s more up to date with my
preferences, I like that it’s more colorful and less sober than it
was. I learned some new things and specially I had fun doing something
I’m not used to which is a great way to push myself and get out of the
comfort zone.&lt;/p&gt;

&lt;p&gt;I hope you enjoy it too.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Packaging AWS Lambda dependencies using docker</title>
   <link href="https://mrdias.com/2017/03/09/packaging-aws-lambda-dependencies-using-docker.html"/>
   <updated>2017-03-09T00:00:00+01:00</updated>
   <id>https://mrdias.com/2017/03/09/packaging-aws-lambda-dependencies-using-docker</id>
   <content type="html">&lt;p&gt;Recently I’ve been using AWS Lambda at work for some projects and one
of the limitations that you have is trying to use packages with
compiled dependencies.&lt;/p&gt;

&lt;p&gt;Compiling them on your machine won’t work and the “recommended” way is
to start an EC2 instance and compile your dependencies there and then
copy those to your machine back.&lt;/p&gt;

&lt;p&gt;Fortunately AWS now provides a docker image for amazon linux which
we can leverage to build our depencies. We can avoid launching an
instance and get faster results.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;Below I provide an example to build the dependencies for a python
project but you can probably modify it for other cases.&lt;/p&gt;

&lt;p&gt;Just put the following content in a Makefile.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-basemake&quot; data-lang=&quot;basemake&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	yum install -y gcc libffi-devel openssl-devel python27-virtualenv
	virtualenv /tmp/venv
	/tmp/venv/bin/pip install --upgrade pip setuptools
	/tmp/venv/bin/pip install -e .
	cp -r /tmp/venv/lib/python2.7/site-packages/. ./aws_lambda_libs
	cp -r /tmp/venv/lib64/python2.7/site-packages/. ./aws_lambda_libs

&lt;span class=&quot;nf&quot;&gt;lambda-deps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	@echo &lt;span class=&quot;s2&quot;&gt;&amp;quot;--&amp;gt; Compiling lambda dependencies&amp;quot;&lt;/span&gt;
	docker run --rm -it -v &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CURDIR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;:/src -w /src amazonlinux make compile

&lt;span class=&quot;nf&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambda&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then you just need to execute:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;make lambda-deps&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When this process finishes you’ll have your dependencies compiled in aws_lambda_libs.&lt;/p&gt;

&lt;p&gt;Just include those contents at the root of your package.zip and deploy.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using docker containers with your existing rails app</title>
   <link href="https://mrdias.com/2015/03/08/using-docker-containers-with-your-existing-rails-app.html"/>
   <updated>2015-03-08T00:00:00+01:00</updated>
   <id>https://mrdias.com/2015/03/08/using-docker-containers-with-your-existing-rails-app</id>
   <content type="html">&lt;p&gt;This tutorial is an extraction from a talk I recently presented about
docker and rails apps at the Barcelona on Rails user group. I’ll
explain how to integrate docker into an existing rails app workflow.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;h3 id=&quot;dockerizing-our-dependencies&quot;&gt;Dockerizing our dependencies&lt;/h3&gt;

&lt;p&gt;The first step to integrate docker into our workflow is to start with
our application dependencies.&lt;/p&gt;

&lt;p&gt;As an example I’ll use the open source app
&lt;a href=&quot;https://github.com/fulcrum-agile/fulcrum&quot;&gt;fulcrum&lt;/a&gt;. I assume this
application is running locally as would be the case with an existing
rails app. For this example we’ll use the postgresql database.&lt;/p&gt;

&lt;p&gt;So the first thing is to initialize our database container. For that
we execute the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;docker run -d --name fulcrum-postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-e &lt;span class=&quot;nv&quot;&gt;POSTGRES_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fulcrum -e &lt;span class=&quot;nv&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fulcrum &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-p &lt;span class=&quot;m&quot;&gt;5432&lt;/span&gt;:5432 postgres&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So we’re creating a container and run it as a daemon (-d), we
setup some environment variables (-e) for the username and password and
make the ports available (-p HOSTPORT:CONTAINERPORT).&lt;/p&gt;

&lt;p&gt;Now we need to adjust our config/database.yml, it should look
something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;postgresql&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;unicode&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;fulcrum_development&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;&amp;lt;%= ENV[&amp;#39;POSTGRES_HOST&amp;#39;] %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;&amp;lt;%= ENV[&amp;#39;POSTGRES_USER&amp;#39;] %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;&amp;lt;%= ENV[&amp;#39;POSTGRES_PASSWORD&amp;#39;] %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;postgresql&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;unicode&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;fulcrum_test&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;&amp;lt;%= ENV[&amp;#39;POSTGRES_HOST&amp;#39;] %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;&amp;lt;%= ENV[&amp;#39;POSTGRES_USER&amp;#39;] %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;&amp;lt;%= ENV[&amp;#39;POSTGRES_PASSWORD&amp;#39;] %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now we run our rails app&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Initialize the db&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POSTGRES_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;boot2docker ip&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POSTGRES_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fulcrum &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fulcrum &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
bundle &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; rake db:setup

&lt;span class=&quot;c1&quot;&gt;# Run the app&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POSTGRES_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;boot2docker ip&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POSTGRES_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fulcrum &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fulcrum &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
bundle &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; rails s&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Please note that for the value for the &lt;em&gt;POSTGRES_HOST&lt;/em&gt; I’m using
boot2docker, if you’re running on linux or against another docker host
replace this accordingly.&lt;/p&gt;

&lt;p&gt;Now when we visit localhost:3000 our app will be running against our
database in a docker container.&lt;/p&gt;

&lt;p&gt;For a more complicated app, we’d do the same for the rest of our
dependencies. By starting with the dependencies, we are preparing the
road so we can have a more decoupled environment while maintaining our
regular workflow.&lt;/p&gt;

&lt;h3 id=&quot;dockerizing-the-app&quot;&gt;Dockerizing the app&lt;/h3&gt;

&lt;p&gt;The next step is to run the application itself inside a container. For
this we’ll need to create our Dockerfile.&lt;/p&gt;

&lt;p&gt;There are many different places to start from. We’ll use the official
ruby 2.1.2 container since this is the ruby version our app needs, but
defining our own from scratch is quite easy as well.&lt;/p&gt;

&lt;p&gt;Our Dockerfile should look like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.1.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;DEBIAN_FRONTEND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;noninteractive apt-get install -y &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    nodejs &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /var/lib/apt/lists/*

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /app&lt;/span&gt;

COPY Gemfile* /app/

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; bundle install -j4

&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Let&amp;#39;s create a user to run the app that is not root&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; usr/sbin/useradd --create-home --home-dir /app --shell /bin/bash fulcrum

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; chown -R fulcrum:fulcrum /app

USER fulcrum

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&amp;quot;rails&amp;quot;, &amp;quot;server&amp;quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also need to tell docker certain files we don’t want as part of our container,
we create a .dockerignore file like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;.git
.bundle
vendor/bundle&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After creating the files in the root of our app we execute:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;docker build -t fulcrum-web .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once that is finised we can run our app like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;docker run --rm -p &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;:3000 --link fulcrum-postgres:postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-e &lt;span class=&quot;nv&quot;&gt;POSTGRES_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-e &lt;span class=&quot;nv&quot;&gt;POSTGRES_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fulcrum &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-e &lt;span class=&quot;nv&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fulcrum &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
fulcrum-web&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So what is this doing exactly? We’re linking our database container to
our web container (–link), we’re exposing the port 3000 (-p) and
we’re also setting environment variables (-e) with the values we used
when creating our db container. After executing this we can go visit
our app running on http://DOCKER_HOST:3000&lt;/p&gt;

&lt;p&gt;The first thing we can see is that we have to set many duplicate
environment variables from the database when running our container,
fortunately docker allows us to have access to a linked container
environment variables.&lt;/p&gt;

&lt;p&gt;We can change now our config/database.yml replacing the username and
password like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;&amp;lt;%= ENV[&amp;#39;POSTGRES_USER&amp;#39;] || ENV[&amp;#39;POSTGRES_ENV_POSTGRES_USER&amp;#39;] %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;&amp;lt;%= ENV[&amp;#39;POSTGRES_PASSWORD&amp;#39;] || ENV[&amp;#39;POSTGRES_ENV_POSTGRES_PASSWORD&amp;#39;] %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We rebuild our container again, and now we can start it simply like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;docker run --rm -p &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;:3000 --link fulcrum-postgres:postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-e &lt;span class=&quot;nv&quot;&gt;POSTGRES_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
fulcrum-web&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, recreating our container every time we make a file change is going
the get very annoying quite soon. For this we can also leverage
another docker facility called volumes. This will allow our container
to have access to our local files. To do this simply we start our
container like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;docker run --rm -p &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;:3000 --link fulcrum-postgres:postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-e &lt;span class=&quot;nv&quot;&gt;POSTGRES_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-v &lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;:/app &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
fulcrum-web&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note: Please make sure you delete your .bundle/config local file to
avoid issues with bundler inside the container.&lt;/p&gt;

&lt;h3 id=&quot;automating-our-setup-with-docker-compose&quot;&gt;Automating our setup with docker compose&lt;/h3&gt;

&lt;p&gt;At this point we have our app running successfully inside a docker
container, but having to be typing this commands constantly is not fun.&lt;/p&gt;

&lt;p&gt;To finish our setup we’ll use &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;docker compose&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let’s create our docker-compose.yml.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;db:postgres&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;POSTGRES_HOST&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;postgres&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;3000:3000&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;.:/app&lt;/span&gt;

&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;postgres&lt;/span&gt;
  &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;POSTGRES_USER&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;fulcrum&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;fulcrum&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now to run our app we simply do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;docker-compose up&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first time we access our app it will complain our db is not
created we can simply fix this by running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;docker-compose run web rake db:setup&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And last but not least if you want to run your tests then you can simply do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;docker-compose run web rake db:test:prepare spec&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;the-end&quot;&gt;The end&lt;/h3&gt;

&lt;p&gt;So that’s it, I hope this tutorial helps you get started with docker
with your existing rails applications. If you want more info about
docker compose, check out my article about fig (docker compose’s
predecesor) &lt;a href=&quot;/2014/12/19/faster-docker-containers-development-using-fig.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Faster docker containers development using fig</title>
   <link href="https://mrdias.com/2014/12/19/faster-docker-containers-development-using-fig.html"/>
   <updated>2014-12-19T00:00:00+01:00</updated>
   <id>https://mrdias.com/2014/12/19/faster-docker-containers-development-using-fig</id>
   <content type="html">&lt;p&gt;Yesterday I had the opportunity to present a lightning talk on the
&lt;a href=&quot;http://www.meetup.com/docker-barcelona-spain/&quot;&gt;Barcelona Docker Group&lt;/a&gt;
about working with &lt;a href=&quot;http://www.fig.sh/&quot;&gt;fig&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During the talk I presented a tool that is helping me focus on
developing the different containers and make the changes to the
Dockerfile and the apps themselves and leave out the details
of using fig.&lt;/p&gt;

&lt;p&gt;The tool is called
&lt;a href=&quot;https://github.com/diasjorge/guard-fig&quot;&gt;guard-fig&lt;/a&gt;.&lt;!-- -**-END-**- --&gt;
It builds on top of guard to detect changes to your fig projects and
will stop and rebuild the corresponding containers as well as
restarting the linked containers to keep everything working
smoothly. It also offers configurable integration with boot2docker and
building your whole project on start.&lt;/p&gt;

&lt;p&gt;If you’re working with fig, give it a try and report any issues.&lt;/p&gt;

&lt;p&gt;You can find the slides for my talk
&lt;a href=&quot;https://github.com/diasjorge/docker-meetup-fig-lightning-talk/raw/master/slides.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Changing to devops</title>
   <link href="https://mrdias.com/2014/12/09/changing-to-devops.html"/>
   <updated>2014-12-09T00:00:00+01:00</updated>
   <id>https://mrdias.com/2014/12/09/changing-to-devops</id>
   <content type="html">&lt;p&gt;It’s been over 3 months since my change to the site operations team at
Xing and time has really been flying by.&lt;/p&gt;

&lt;p&gt;Everything is new and I really don’t know what to do many times and
that I find very delightful. The investigation, learning, figuring out
how to achieve something, reading forums or stack overflow and trying
to fit a puzzle into your head. I think this is what I love the most
about computers, that moment when you understand the machine, what it
does and why it does it. It’s the hack, making the computer do what
you want. Getting out of my comfort zone is helping me appreciate the
basics more.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;During this time, I’ve played with many technologies, different
programming languages, libraries, etc. It’s not about a product
anymore I care, it’s about the platform.  Even though I’m immersed in
some low level details about the systems most of the day, the work
itself feels at a higher level. The components are bigger and so are
their interactions. I could compare caring about an app with caring
for a model, the whole database instead of my schema.&lt;/p&gt;

&lt;p&gt;But not all is about technology, the human side is very interesting as
well. I get to interact with most of the engineers working in the
company, so I talk to a very diverse range of people. Different
languages, cultures, backgrounds, etc and I have to say most people
are actually very grateful when you help them out. Others just seem
like they don’t know how to ask things and I have to work on my
patience, frustration can sometimes make us say the right things in a
very wrong way, this goes for both sides. I also find that I’m more
mentally drained when I finish the work. I guess it just takes a lot
of energy to be constantly solving other’s problems even if it’s also
very regarding.&lt;/p&gt;

&lt;p&gt;I’m really enjoying this big new learning experience. I feel there are
so many opportunities as when I started learning Ruby on Rails around
8 years ago. I see this as a new beginning, an evolution from
developing software to developing platforms.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Growing a garden</title>
   <link href="https://mrdias.com/2014/07/03/growing-a-garden.html"/>
   <updated>2014-07-03T00:00:00+02:00</updated>
   <id>https://mrdias.com/2014/07/03/growing-a-garden</id>
   <content type="html">&lt;p&gt;A couple months ago I started growing a vegetable garden at home with my girlfriend. It’s been a great experience. She’s always been into plants, we have lots of them around the house but never had we tried to grow food. I think the fact that I can get something out of the experience that is more than just aesthetic but also functional (I can eat the vegetables) has made it more appealing for me.&lt;/p&gt;

&lt;p&gt;There have been some experiences so far that I somehow can relate with developing a software project.
&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;A garden needs continuous care just like a software project. I need to constantly take care of it, I need to water it constantly just like a project needs your constant development.&lt;/p&gt;

&lt;p&gt;As it grows some of the plants leaves start looking bad and so they need to be trimmed, just like in any of our projects you need to keep your code tidy and keep doing small refactorings. If I don’t trim the plants then they start loosing strength, the bad leaves consume energy from the plant, the same as rusty and buggy code drain energy from your project.&lt;/p&gt;

&lt;p&gt;Since we’re very new at this we’ve made plenty of mistakes, giving the plants too much water or too little, not knowing exactly how to cut the plants, etc. The same as starting to use a new framework or library and you still don’t know how to do it “the right way” and make many mistakes. Fortunately google is as helpful to find information about gardening as it is to help you find the right answers about development.&lt;/p&gt;

&lt;p&gt;Some time ago we got a plague in our tomato plants, some bugs (literally) are attacking it. When I noticed it I felt very sad. I’ve been working a lot of my garden and now some ugly bugs are destroying it. I think any software developer can relate to this one. Anyway, although some damage has been made, I’ve bought some ecological pesticide and now things are starting to get better. Sometimes you can only learn the lessons the hard way. My immediate reaction was to go and buy anything that would kill the bugs but we needed something that would kill the pest and allow us to be able to eat the vegetables later. When working on a software project we want to solve bugs very quickly but we have to keep in mind as well the long term goals and try to find the right solution. It’s best to find the right solution and avoid something that could cause more harm than good.&lt;/p&gt;

&lt;p&gt;And finally as with any software project what a great feeling it was when we made a deployment. One of the lettuces had fully grown and it was ready to eat. I can’t describe the nice warm, fuzzy feeling I had to eat something that I helped to grow. It’s such a good feeling to enjoy something you’ve invested your time and effort into it. Besides the lettuce was really fresh (can it get any more fresh?) and crunchy.&lt;/p&gt;

&lt;p&gt;I hope to keep growing more vegetables, learn about them and get better at it, just like with any technology.&lt;/p&gt;

&lt;p&gt;My recommendation, start growing your own small vegetable garden, I think you can learn a lot about yourself by doing it.&lt;/p&gt;

&lt;p&gt;Happy &lt;del&gt;hacking&lt;/del&gt; planting!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Barcelona GDG Devfest 2013</title>
   <link href="https://mrdias.com/2013/10/12/barcelona-gdg-devfest-2013.html"/>
   <updated>2013-10-12T00:00:00+02:00</updated>
   <id>https://mrdias.com/2013/10/12/barcelona-gdg-devfest-2013</id>
   <content type="html">&lt;p&gt;I was invited with my friend &lt;a href=&quot;http://meninno.com&quot;&gt;Jean Carlos Meninno&lt;/a&gt; to give a presentation on the &lt;a href=&quot;http://bcn.gdgdevfest.com/&quot;&gt;GDG DevFest Barcelona 2013&lt;/a&gt;. It was a great opportunity to talk about the work we’re doing recently for XING and the things we’ve been learning about developing large scale backbone applications.&lt;/p&gt;

&lt;p&gt;Here you can find the slides: &lt;a href=&quot;http://diasjorge.github.io/google-dev-fest-slides/&quot;&gt;http://diasjorge.github.io/google-dev-fest-slides/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you like them.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Closed doors open source</title>
   <link href="https://mrdias.com/2012/09/10/closed-doors-open-source.html"/>
   <updated>2012-09-10T00:00:00+02:00</updated>
   <id>https://mrdias.com/2012/09/10/closed-doors-open-source</id>
   <content type="html">&lt;p&gt;During my time working at &lt;a href=&quot;http://xing.com&quot;&gt;XING&lt;/a&gt; I believe my single
biggest contribution for the company is a side project I’ve developed
called Xing scripts. This project started with a personal need for
working with our development environment in a more automated way. I’m
a big proponent of automating everything you can and so when I started
working I realized that there were these tasks that I would do over
and over again. Since I couldn’t bare doing all this manual work I
started writing my own scripts.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;One day I showed them to one of my fellow team members and he liked
them very much. They were just a mix of quick and dirty ruby and bash
scripts. Some other people wanted to use them too so I started
packaging them as a ruby gem. And then this scripts began evolving. I
kept adding more features and it felt good. Through word of mouth more
people started hearing about them and asking for support for their own
applications, so I did. With time the gem started to gain more
traction inside the company and people have started sending patches to
add other features and supporting many more applications. This has
been very regarding for me, many people have praised me for the work
I’ve put into this, since it helps them work much faster.&lt;/p&gt;

&lt;p&gt;When a new project is started one of the first things they do, or ask
me, is for support with the xing scripts, this fact helps me feel like
I’ve accomplished something very good and that my work on this project
is important to many people and for the company as a whole. This
feeling is the same when I do Open Source, when someone uses one of my
projects or when I collaborate on another project. The lessons I’ve
learned while working on this project have been many, from a technical
point of view as well as personally. For my “regular” work I’m
basically doing web stuff with Rails, but this has been an opportunity
to work with Ruby on something non web. I had some experience doing
command line applications but none of this scale. With the growth of
the number of features and applications that need to be supported I’ve
had to solve some very interesting problems. I’ve learned a lot about
OOP and software design, testing CLIs and how they interact with other
services, the importance of semantic versioning, creating a ChangeLog,
writing proper documentation, giving support to the users, “selling”
your project, etc. All these things that are not part of my daily work
and that without this project I couldn’t have learned.&lt;/p&gt;

&lt;p&gt;I guess the lesson here is that you can create stuff to solve your own
problems and maybe other people’s too. Other people might be
struggling with the same problems and have their own solutions, so you
can unite and work together. Open source doesn’t have to be code on
github, it can be internal projects inside your company, whether
they’re tools, libraries, silly web sites, etc. just share them.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git rebasing without conflicts</title>
   <link href="https://mrdias.com/2012/07/11/git-rebasing-without-conflicts.html"/>
   <updated>2012-07-11T00:00:00+02:00</updated>
   <id>https://mrdias.com/2012/07/11/git-rebasing-without-conflicts</id>
   <content type="html">&lt;p&gt;Yesterday I was at work with a colleague and we wanted to merge a long-running branch we had. This branch was full of useless commits so we wanted to clean it up. We tried an interactive rebase but we got a lot of conflicts since git doesn’t know how to resolve merge conflicts that we had previously fixed. As you probably know this is no fun, so we did what any sane person would do and found a nice solution for this called &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-rerere.html&quot;&gt;git-rerere&lt;/a&gt;.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;This command allows you to record the way you resolve conflicts and then reuse them when doing automerges in the future. But there’s a drawback to it, first you have to enable an option and second you have to record this solutions as you do them. If you didn’t know about this command before then you didn’t record those solutions and you’re at the same point where you started. Don’t worry there’s a solution it’s called &lt;a href=&quot;http://git.kernel.org/?p=git/git.git;a=blob;f=contrib/rerere-train.sh;h=2cfe1b936b0feef1bd40947ce6ab249f62a6ad55;hb=HEAD&quot;&gt;rerere-train&lt;/a&gt;, it’s a contrib script from git which recreates the rerere database from your existing commits, this is exactly what we need…awesome!!&lt;/p&gt;

&lt;p&gt;So how do you use it? It’s very easy.
First you have to enable git-rerere like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;git config rerere.enabled &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then download the script to somewhere in your $PATH and then do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;sh rerere-train.sh YOUR-LONG-RUNNING-BRANCH-NAME&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You have to wait some time so it does it’s work and it’ll depend on how long is the branch. After it finishes you can do the rebase. something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;git rebase -i master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now git will know how to resolve the conflicts for you. Enjoy!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using chef to setup your OSX environment</title>
   <link href="https://mrdias.com/2012/05/11/using-chef-to-setup-your-development-environment-in-osx.html"/>
   <updated>2012-05-11T00:00:00+02:00</updated>
   <id>https://mrdias.com/2012/05/11/using-chef-to-setup-your-development-environment-in-osx</id>
   <content type="html">&lt;p&gt;Recently I had to reinstall my computer at work since I had to update to Lion and I could only do a fresh install, so I decided to try to automate the installation process since some of my colleagues are going through the same and it seems like every time we have to waste many hours or days to solve the same issues over and over.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;A few days before I had stumbled upon this &lt;a href=&quot;http://jtimberman.housepub.org/blog/2012/01/28/iterm2-with-tmux/&quot;&gt;article&lt;/a&gt; just by coincidence and it gave me some light into what could be done. This article led to a &lt;a href=&quot;http://jtimberman.housepub.org/blog/2011/04/03/managing-my-workstations-with-chef/&quot;&gt;previous one&lt;/a&gt; by the same author about using chef to manage his workstations I knew what had to be done.&lt;/p&gt;

&lt;p&gt;So when I finally decided to tackle the problem I found a nice addition to the whole package which is a gem called &lt;a href=&quot;https://github.com/mkocher/soloist&quot;&gt;soloist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Soloist makes it &lt;strong&gt;very&lt;/strong&gt; easy to setup your environment and hides lots of the complexity of using chef-solo. Basically it just needs a very simple file structure to know about your cookbooks and a configuration file where you specify the recipes that you need.&lt;/p&gt;

&lt;p&gt;I started to use it, but then I got into a few problems. The first one is that chef 0.10.8 had some problems with your USERID if your account is created by Active Directory (which of course was my case), so I had to install chef 0.10.10.rc.3. This made it work. &lt;strike&gt;I also found that the soloist version from rubygems at the moment (0.9.4) did not allow to pass node attributes so I had to build the gem from the latest HEAD on the git repository.&lt;/strike&gt; UPDATE: a new version of soloist was released that fixes that issue.&lt;/p&gt;

&lt;p&gt;After reading many of the recipes from &lt;a href=&quot;https://github.com/pivotal/pivotal_workstation&quot;&gt;pivotal_workstation&lt;/a&gt; I chose the ones I liked the most and in the end things worked as you could expect, I did make some changes to some of the recipes to suit them better to my needs and to deal with a bug in chef with symlinks, although if you’re using a stable chef version perhaps you should be fine. I found other useful cookbooks as well and incorporated them to my soloist project and I even wrote some of my own recipes (which I have to say was very easy).&lt;/p&gt;

&lt;p&gt;So in conclusion I’m hooked, I know all my macs (and maybe pc’s as well) will have to be installed like this in the future. This was as well my first experience working with chef and it was a very pleasant one even though I had some problems, but that’s the price to pay for being on the “bleeding” edge.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Slow down, you are programming too fast</title>
   <link href="https://mrdias.com/2012/02/29/slow-down-you-are-programming-too-fast.html"/>
   <updated>2012-02-29T00:00:00+01:00</updated>
   <id>https://mrdias.com/2012/02/29/slow-down-you-are-programming-too-fast</id>
   <content type="html">&lt;p&gt;As a programmer, the impetus to go as fast as you can is to be taken with caution as it helps you move forward but it can also hold you back.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;Many times I’ve heard about “being in the zone” and sometimes I’ve had this feeling when code is just flowing from your hands but this state of mind is very tricky as you start to relax and stop being conscious. Being aware of what you’re doing and the road that lays in front of you is key to achieve your goals and not fall in mental traps of comfort.&lt;/p&gt;

&lt;p&gt;Many times the lack of experience combined with great aptitude can lead to a feeling of trying to compensate with speed. Pure speed is akin to raw force, it can only get you so far. Great programmers are not measured in “Keystrokes per minute”. Better than being fast is making every keystroke count. Get to know your editor.&lt;/p&gt;

&lt;p&gt;Patience is a great virtue and you should nourish it. When tackling a problem, the first thing to do is understand it, if you’re working with someone else even better, discuss it, validate your assumptions. When trying to use a library read the documentation first, read the man page, RTFM sounds familiar? When reading, be sure to actually comprehend what is written don’t just scan through pages, you need to really absorb the information, it will save you many hours of debugging and a great deal of frustrations. When you find an error read the back-trace, read the environment variables, don’t just assume you know the problem until you understand the cause. When coding unless you’re just trying something out, think about the ways you want the code to be used, think of your interface before your implementation. This is one of the best outcomes of doing TDD, so even if you’re not doing TDD/BDD/ADD or whatever flavor you prefer at least think from the outside, you will soon realize you need some tests.&lt;/p&gt;

&lt;p&gt;Being conscious let’s you see the obstacles in front of you, so you can avoid them or just defer them until you’re better prepared. Be able to recognize when you’re stuck and back away.&lt;/p&gt;

&lt;p&gt;And last but not least take pauses every so often, rest your eyes and your brain, take a deep breath, relax and you’ll be back into action with more energy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Being pragmatic</title>
   <link href="https://mrdias.com/2011/12/21/being-pragmatic.html"/>
   <updated>2011-12-21T00:00:00+01:00</updated>
   <id>https://mrdias.com/2011/12/21/being-pragmatic</id>
   <content type="html">&lt;p&gt;It is perhaps my experience but I’ve hardly had the opportunity to work on green field projects, but rather worked on legacy ones where most of the original developers were no longer part of the team or even none of them. Projects with little to no documentation and in some cases no tests at all. You probable know this feeling, it sucks, you want to do things but everything you touch breaks something else, where you obviously see that there was lack of care. &lt;!-- -**-END-**- --&gt;The point is not to criticize the developers who did this, they probably didn’t know any better and they probably tried to do their best given the constraints they had. But being the one who cleans that mess is not cool. So what can you do? Well don’t be that developer. Take care of your future self and others who may come after you and make it easier for them. Others will probably curse you anyway, you just can’t be perfect, but at least try to be invisible, try to give your best shot and don’t cut corners. Test your code and think from the outside, how the code is going to be used. May be you’re thinking that your boss is going to tell you to “not waste time” with tests or “just make things work”, and this is the point where you have to keep true to yourself and be a professional. You have to be ethic and do things well, but you also have to choose your battles right, not everything is a matter of life and death but also not everything is unimportant, choose right and you’ll earn the confidence of your peers and superiors.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;Sometimes a big refactoring is too much to tackle at the moment, then try to contain the mess, don’t add more to it if you can avoid it, resist the urge to go and rewrite it all. Sometimes parts of an application are not pretty, but they’re stable and you hardly have to modify them, don’t change a lot of code just to make it “better”. In other occassions you don’t like the “style” of the code, adapt to it, other people probably don’t like your “style” either. Sometimes a refactoring seems like the only choice, then go ahead but don’t underestimate the ones before you, as you may find some surprises in your way. Be patient, with time you will learn the parts of the application that are always changing and are hard to mantain and then you’ll have enough experience to do a proper refactoring, if you rewrite everything you don’t like then you’ll never learn why you don’t like it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Back from the trenches</title>
   <link href="https://mrdias.com/2011/08/29/back-from-the-trenches.html"/>
   <updated>2011-08-29T00:00:00+02:00</updated>
   <id>https://mrdias.com/2011/08/29/back-from-the-trenches</id>
   <content type="html">&lt;p&gt;It’s been some agitated months lately for me, I quitted working at JustLanded after almost two years there and then went working for some consulting, the experience was not so great, actually it was really bad, the kind of experience that has made me learn to choose very carefully my future career moves and never again believe in marketing people. Fortunately I got an offer to work at &lt;a href=&quot;https://xing.com&quot;&gt;XING&lt;/a&gt; offices in Barcelona, so I packed my stuff and moved there. Now this is a really good place to work, everything was as we talked, they’ve been very helpful with my relocation and the environment is great, lots of smart people that want to do a good job, so nowadays I’m very happy and enjoying my new city.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;Since moving to Barcelona I’ve been keeping myself very busy contributing to some open source projects as Rubinius, Rinari and lost of elisp stuff and it’s been awesome. I’ve also released a new project called &lt;a href=&quot;https://github.com/xing/filet&quot;&gt;filet&lt;/a&gt;, which is a DSL to write acceptance tests on top of Test::Unit, with some nice extra features, but that will be subject of a future post.&lt;/p&gt;

&lt;p&gt;Also since I started working at &lt;a href=&quot;https://xing.com&quot;&gt;XING&lt;/a&gt; they got me a MacBook Pro, so it was a big switch for me since I’ve been using Ubuntu for years. After a couple of months I can say I’m really used to the new OS, though I still use Ubuntu every now and then, but getting there was not always easy. The first thing I missed was a package manager a la APT, the lesson learned is that if you value your sanity you will just uninstall macports and use homebrew. Another thing I was missing was maximizing windows, for that there is a tool RightZoom that makes them actually maximize. I also struggled a bit to get emacs and my configurations working, since I didn’t wanted to stay on emacs 22 which ships by default with OSX. I tried Aquamacs, Carbon Emacs, etc and finally settled for the package at &lt;a href=&quot;http://emacsformacosx.com/&quot;&gt;http://emacsformacosx.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So it took me a while to write this post, I’ve been procrastinating it for far too long, so now I hope I can go back to publishing on a more regular basis.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Avoid Empty Deploys with Capistrano</title>
   <link href="https://mrdias.com/2011/01/13/avoid-empty-deploys-with-capistrano.html"/>
   <updated>2011-01-13T00:00:00+01:00</updated>
   <id>https://mrdias.com/2011/01/13/avoid-empty-deploys-with-capistrano</id>
   <content type="html">&lt;p&gt;If you’ve ever forgotten to push your changes to the remote repository before trying to make a deploy, you will know that it can be really frustrating to think that everything has gone live when actually it has not. This little script will help you avoid this situations.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:check_changes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_revision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_revision&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Capistrano&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CLI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;You don&amp;#39;t have any changes to deploy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;agree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Capistrano&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CLI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Continue (Yes, [No]) &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agree&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# current_revision depends on current_path&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reset!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:current_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reset!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:current_revision&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reset!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:real_revision&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What this does is check that we have different revisions deployed between our deployed version and the version in repositories and it will ask for confirmation in case they are the same. Just include the above code in your deploy recipe and then for the environment you want to deploy to just include the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;deploy:update_code&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;deploy:check_changes&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you’re doing any kind of automated deployment, let’s say from you continuous integration server to your staging server don’t include that code since it will sometimes just wait for an answer that is never going to come.&lt;/p&gt;

&lt;p&gt;Hope this helps you and happy deployments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Passenger, RVM gemsets and Bundler</title>
   <link href="https://mrdias.com/2010/11/17/passenger-rvm-gemsets-and-bundler.html"/>
   <updated>2010-11-17T00:00:00+01:00</updated>
   <id>https://mrdias.com/2010/11/17/passenger-rvm-gemsets-and-bundler</id>
   <content type="html">&lt;p&gt;When using passenger with rvm I’ve had some issues with project specific gemsets, where bundler was unable to find the gems.
After searching a lot I found out about using the “config/setup_load_paths.rb” file to tell passenger where to locate your gems, but then I had a new issue with rvm trying to use the system ruby instead of the ruby version of my .rvmrc file.&lt;/p&gt;

&lt;p&gt;After going to the irc channel, I got some help that help me fixed my problem. The culprit was my rvmrc file.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;As I’ve seen on many blog posts the file looked something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;rvm use --create ree@rails235&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The solution was to generate the rvmrc file using rvm itself like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;rvm --create --rvmrc use ree@rails235&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The file contents now look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -d &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rvm_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/.rvm&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/environments&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; -s &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rvm_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/.rvm&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/environments/ree-1.8.7-2010.02@rails235&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rvm_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/.rvm&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/environments/ree-1.8.7-2010.02@rails235&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  rvm --create use  &lt;span class=&quot;s2&quot;&gt;&amp;quot;ree-1.8.7-2010.02@rails235&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And passenger is able to find my gems without any problems.&lt;/p&gt;

&lt;p&gt;Hope this helps you as I spent way too much time with this issue.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Conferencia Rails Workshop</title>
   <link href="https://mrdias.com/2010/11/04/conferencia-rails-workshop.html"/>
   <updated>2010-11-04T00:00:00+01:00</updated>
   <id>https://mrdias.com/2010/11/04/conferencia-rails-workshop</id>
   <content type="html">&lt;p&gt;As promised here are the slides for the “Conferencia Rails” workshop on process automation. Thanks to all the people that were there. I’m also releasing the redmine CLI I’ve created along with the CLI twitter client.&lt;/p&gt;

&lt;p&gt;The presentation was created using the &lt;a href=&quot;http://slideshow.rubyforge.org/&quot;&gt;slideshow&lt;/a&gt; gem which generates an html document for you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/workshop-slides/workshop.html&quot;&gt;Slides&lt;/a&gt; To start the presentation just hit the “LEFT” arrow key. You can also find a pdf version &lt;a href=&quot;/workshop-slides/workshop.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/diasjorge/redmine-cli&quot;&gt;Redmine CLI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/diasjorge/ruby-cli-tweet&quot;&gt;Ruby CLI Tweet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you enjoy it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Enterprise, Passenger and Encoding hell</title>
   <link href="https://mrdias.com/2010/05/25/ruby-enterprise-passenger-and-encoding-hell.html"/>
   <updated>2010-05-25T00:00:00+02:00</updated>
   <id>https://mrdias.com/2010/05/25/ruby-enterprise-passenger-and-encoding-hell</id>
   <content type="html">&lt;p&gt;Today I spent several hours with my friend &lt;a href=&quot;http://es.linkedin.com/in/glebm&quot;&gt;Gleb&lt;/a&gt; trying to find a weird bug we we’re having importing some rss feeds.&lt;/p&gt;

&lt;p&gt;We have a rake task that will grab an xml feed and import it to our system. When we call this rake task from the command line it would run fine, but if we run it from inside our application, we would get some wrong characters (you know, the usual ???) in the imported items.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;After trying a million ways to get this to work, we found that the problem is that Passenger doesn’t pass the environment variables to the application processes, so our import task wouldn’t know about our LANG variable. We have this set to LANG=en_us.UTF8 but our process would not see it, which would cause ruby to not use utf8 for the strings.&lt;/p&gt;

&lt;p&gt;The solution was pretty straight forward, just pass the LANG variable when calling the rake task, finding the solution not so straight forward and definitely not fun. The sad part is that this is a known issue with passenger since 2008 and this is the second time it gets me (If you’ve tried to use an oracle db you know what I’m talking about). If you need more information about this you can check it &lt;a href=&quot;http://blog.phusion.nl/2008/12/16/passing-environment-variables-to-ruby-from-phusion-passenger/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Emacs support for Jekyll</title>
   <link href="https://mrdias.com/2010/04/11/emacs-support-for-jekyll.html"/>
   <updated>2010-04-11T00:00:00+02:00</updated>
   <id>https://mrdias.com/2010/04/11/emacs-support-for-jekyll</id>
   <content type="html">&lt;p&gt;If you’re using emacs to write your jekyll blog posts, there is a mode to help you with some common tasks. It is originally from &lt;a href=&quot;http://metajack.im/2009/01/02/manage-jekyll-from-emacs/&quot;&gt;metajack&lt;/a&gt;. Recently I thought it could be a nice addition to have syntax highlight support for jekyll posts, so I got my hands dirty and after some hours of lisp hacking (this was my first attempt at lisp programming) it was a reallity. It is based on &lt;a href=&quot;http://ourcomments.org/Emacs/nXhtml/doc/nxhtml.html&quot;&gt;nxhtml&lt;/a&gt; so you need it to work.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;Here is an screenshot of it at work:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lh5.ggpht.com/_uASPsTfW2ao/S8IdbhfcsiI/AAAAAAAAAD0/oyN3znNuWXg/jekyll-highlight.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://lh5.ggpht.com/_uASPsTfW2ao/S8IdbhfcsiI/AAAAAAAAAD0/oyN3znNuWXg/s400/jekyll-highlight.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can get it &lt;a href=&quot;http://github.com/diasjorge/jekyll.el&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting environment to run migrations with capistrano ext</title>
   <link href="https://mrdias.com/2010/03/09/setting-environment-to-run-migrations-with-capistrano-ext.html"/>
   <updated>2010-03-09T00:00:00+01:00</updated>
   <id>https://mrdias.com/2010/03/09/setting-environment-to-run-migrations-with-capistrano-ext</id>
   <content type="html">&lt;p&gt;If you’re using capistrano-ext to deploy to a different server, using a custom environment, you’ve probably noticed that it always tries to run the migrations for the production environment, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; path_to_app/deploy/releases/20100309152738&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; rake &lt;span class=&quot;nv&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production  db:migrate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Digging through capistrano’s source I found the solution is really simple, just set the rails_env variable to the environment you want, in this example staging. So inside config/deploy/staging.rb&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rails_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;staging&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then when migrations get executed they’ll have RAILS_ENV=staging.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Monthly archives for Jekyll</title>
   <link href="https://mrdias.com/2010/03/08/monthly-archives-for-jekyll.html"/>
   <updated>2010-03-08T00:00:00+01:00</updated>
   <id>https://mrdias.com/2010/03/08/monthly-archives-for-jekyll</id>
   <content type="html">&lt;p&gt;Recently I moved my blog to &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, while being able to write stuff directly in my favorite editor EMACS, there was some functionality that I was missing from my previous custom blog engine, such as archives. Looking at how I could achieve this, I found &lt;a href=&quot;http://rfelix.com&quot;&gt;Raoul Felix&lt;/a&gt; approach to the problem. Instead of patching jekyll, he wrote a small library that wraps around it, called &lt;a href=&quot;http://github.com/rfelix/jekyll_ext&quot;&gt;jekyll_ext&lt;/a&gt;. Using it was really easy, and based on some of the extensions he created, I was able to provide this functionality in my site.&lt;/p&gt;

&lt;p&gt;Although I had archives generated for me, I was still missing a way to display this information on my site, so I decided to create my own extension.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;I added the following code inside _extensions/archive_iterator.rb, which will provide me with an array of all the months when I’ve written posts:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;AOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:site_payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;monthly_archives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;site_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;monthly_archives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MONTHNAMES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s1&quot;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s1&quot;&gt;&amp;#39;posts&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;site&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;monthly_archives&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monthly_archives&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The information for the archive was gathered from the archive_gen extension, although I had to slightly modify. Instead of processing the information after render, I had to do it before rendering, so the information would be available when the pages are created, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;site_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;site_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;site_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;][&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;][&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;site_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;][&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;][&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;site_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;][&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;][&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then inside my layout I was able to easily display this information like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  { % for monthly_archive in site.monthly_archives reversed % }
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; (0 posts)
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  { % endfor % }
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note the extra space between ‘{‘ and ‘%’, this is to avoid liquid interpreting the code inside the tags. You can view all the source code &lt;a href=&quot;http://gist.github.com/324737&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>View your emails with cucumber</title>
   <link href="https://mrdias.com/2010/03/02/view-your-emails-with-cucumber.html"/>
   <updated>2010-03-02T00:00:00+01:00</updated>
   <id>https://mrdias.com/2010/03/02/view-your-emails-with-cucumber</id>
   <content type="html">&lt;p&gt;I’ve been developing some new mailers at work, and I’ve found it really helpful to be able to view the emails as they are sent to the users. So I’ve implemented a cucumber step to help me achieve that, inspired on a similar webrat step for web pages.&lt;!-- -**-END-**- --&gt;&lt;/p&gt;

&lt;p&gt;Inside a support file for cucumber, like features/support/open_email.rb, insert the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SaveAndOpenEmail&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Webrat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SaveAndOpenPage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save_and_open_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exist?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saved_page_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saved_page_dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/email-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.html&amp;quot;&lt;/span&gt;
 
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;open_in_browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
 
&lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SaveAndOpenEmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then in your step definitions, you can implement a step like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^show me the emails?$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;save_and_open_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: As of version 0.2.2 of pickle, they already include this functionality, although it has a bug which has not been fixed. If you try to call that step, you will see:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`open_in_browser&amp;#39; for #&amp;lt;Cucumber::Rails::World:0x..fdb4951fa&amp;gt; (NoMethodError)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To fix it, as a workaround do this in features/support/email.rb&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pickle/email&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Webrat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SaveAndOpenPage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>ActiveRecord migrations from the console</title>
   <link href="https://mrdias.com/2010/02/23/activerecord-migrations-from-the-console.textile"/>
   <updated>2010-02-23T00:00:00+01:00</updated>
   <id>https://mrdias.com/2010/02/23/activerecord-migrations-from-the-console</id>
   <content type="html">If you ever run into the situation where one migration doesn't complete sucessfully, and you're stuck with a column in a table or a new table, so you can't drop the migration or execute the migration again, you can always call the migration methods from the console like this:&lt;!-- -**-END-**- --&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:table_name&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_column&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:table_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:column_name&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Hopefully this will help you when you're developing your migrations.</content>
 </entry>
 
 <entry>
   <title>IE issues with new Element and class with Prototype</title>
   <link href="https://mrdias.com/2009/08/12/ie-issues-with-new-element-and-class-with-prototype.textile"/>
   <updated>2009-08-12T00:00:00+02:00</updated>
   <id>https://mrdias.com/2009/08/12/ie-issues-with-new-element-and-class-with-prototype</id>
   <content type="html">The problem we have is that this code

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;klassName&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

will work in firefox but in IE (tested on version 8) the className is never set, which was causing some problems with the elements styles. &lt;!-- -**-END-**- --&gt;

One of the workarounds would be to explicitly add the class name, like this:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;klassName&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

The problem with this approach is that at work, we have a huge javascript codebase, so instead, we are going to monkey patch Prototype. We're working against version 1.6.0.3 of prototype, that's why we add the alert, so when we update, we'll catch this and check if it was fixed on core.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// This is a dirty hack to protoype, so IE, will take class names on new Element&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// new Element(&amp;#39;div&amp;#39;, {&amp;#39;class&amp;#39;:&amp;#39;klassName&amp;#39;}) doesn&amp;#39;t work on IE but does on firefox&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// in IE, we wouldn&amp;#39;t get the className set.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.6.0.3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;BEWARE OF THE PROTOTYPE VERSION&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; name=&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;class=&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cloneNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</content>
 </entry>
 
 <entry>
   <title>Git Goodies</title>
   <link href="https://mrdias.com/2009/02/12/git-goodies.textile"/>
   <updated>2009-02-12T00:00:00+01:00</updated>
   <id>https://mrdias.com/2009/02/12/git-goodies</id>
   <content type="html">A couple days ago I had to gather some information from a git repository, so I'm sharing this small scripts with you. &lt;!-- -**-END-**- --&gt;

List of all authors on a git repo:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;git log --pretty&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;short &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep Author: &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

List all modified files since a revision:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;git-whatchanged revision.. --pretty&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;oneline &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;^:&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $6}&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</content>
 </entry>
 
 <entry>
   <title>Will Paginate And Ajax</title>
   <link href="https://mrdias.com/2008/12/16/will-paginate-and-ajax.textile"/>
   <updated>2008-12-16T00:00:00+01:00</updated>
   <id>https://mrdias.com/2008/12/16/will-paginate-and-ajax</id>
   <content type="html">I recently had to implement some ajax pagination for a site. After googling for a while I found a solution, but I couldn't customize the pagination url's or I had to specify the paginator to use (will paginate's default or mine for ajax), so I came up with this solution which fulfils all my needs.&lt;!-- -**-END-**- --&gt;

First create the following class in your app/helpers.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RemoteLinkRenderer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WillPaginate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LinkRenderer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@remote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;page_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@remote&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link_to_remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
                               &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Then you have to tell will_paginate which link_renderer to use, I do this in a rails initializer.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WillPaginate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ViewHelpers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagination_options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;RemoteLinkRenderer&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

So with this solution, you can work like you would normally with will_paginate, but if you need to do an ajax link, then you'll have to pass the options in the remote hash, something like this:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;will_paginate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:remote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;comments&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

That's it enjoy. You can keep passing the same options you would normally do to will_paginate to customize the behaviour.
</content>
 </entry>
 
 <entry>
   <title>Will Paginate And Merb</title>
   <link href="https://mrdias.com/2008/12/09/will-paginate-and-merb.textile"/>
   <updated>2008-12-09T00:00:00+01:00</updated>
   <id>https://mrdias.com/2008/12/09/will-paginate-and-merb</id>
   <content type="html">I read something about how to do it in this &quot;post&quot;:http://merbist.com/2008/10/27/will_paginate-and-merb/ by The merbist, albeit the information was not complete.
So here are my instructions:&lt;!-- -**-END-**- --&gt;

Clone mislav's will_paginate repo and build the gem from the agnostic branch.

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/mislav/will_paginate.git
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; will_paginate/
git checkout origin/agnostic 
gem build&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

With this commands you've generated the will_paginate-3.0.0.gem.

If you want to install it system-wide use your usual gem install.
If you want to bundle it in your project, as I did, then you'll have to do:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;&lt;/span&gt;thor merb:gem:install path/to/gem&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

That's it.
</content>
 </entry>
 

</feed>
